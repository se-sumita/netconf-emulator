#!/usr/bin/env python
import sys
import json
import subprocess

def parse(schema_list_key, ancestors, obj):
  t = obj[0]
  if t == 'list':
    path = '/' + '/'.join([a.split(':')[-1] for a in ancestors])
    schema_list_key[path] = [o[1] for o in obj[2]]
  if t == 'list' or t == 'container':
    for k, v in obj[1].items():
      parse(schema_list_key, ancestors + [k], v)

def parse_jtox(jtox):
  schema_list_key = {}
  for k, v in jtox['tree'].items():
    parse(schema_list_key, [k], v)

  print("schema-list-key:")
  for k, v in sorted(schema_list_key.items()):
    if len(v) > 0:
      print("  %s: [%s]" % (k, ', '.join(v)))

def create_jtox(yang_dir):
  cmd = "pyang --ignore-errors -f jtox -p %s %s/*.yang" % (yang_dir, yang_dir)
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
  out, err = p.communicate()
  return json.loads(out)

if __name__ == '__main__':
  if len(sys.argv) < 2:
    print >> sys.stderr, "usage: %s yang-directory\n" % sys.argv[0]
    exit(1)

  jtox = create_jtox(sys.argv[1])
  parse_jtox(jtox)
